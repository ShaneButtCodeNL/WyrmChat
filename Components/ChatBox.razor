@using Microsoft.AspNetCore.SignalR.Client;
@using WyrmChat.Models;
@using WyrmChat.Data;
@inject NavigationManager NavigationManager;
@implements IAsyncDisposable;
<div class="chatboxContainer">
   <h1 style="color:white;">WyrmChat</h1>
   <!-- Display logged in user and the button to log out -->
   @if(LoggedInUser is not null){
      <div class="loggedInDetailsBox">
         <span>Logged in as: @LoggedInUser.UserName</span>
         <br/>
         <button type="button" class="btn btn-primary" @onclick="@Logout" >Logout</button>
      </div>
   }
   <!--Select/Make Room Here -->
   @if(LoggedInUser is not null && roomID==0){
      <form id="chooseRoomForm">
         @if(chatRoomMade){
            <span class="joinRoomSpan">Select or join a Room :</span>
            <select id="joinRoom"  class="btn btn-primary" @bind=@selectedRoomID>
               <option id="defaultSelectRoom" selected disabled hidden value="" ></option>
               @foreach (var item in ChatLogs.GetListOfChatLogIDs())
               {
                  <option id=$"{item}" value=$"{item}">@item</option>
               }
            </select>
            <button id="joinRoomButton" class="btn btn-primary" type="button" @onclick="@JoinChatRoom">Join Room</button>
         }
         @if(!chatRoomMade){
            <span class="joinRoomSpan">No Rooms Available Make a room below</span>
         }
         <button id="makeRoomButton" class="btn btn-primary" type="button" disabled="@(!isConnected)" @onclick="@MakeNewChatRoom">Make Room</button>
      </form>
   }
   <!--Display the ChatLog for selected room -->
   @if(LoggedInUser is not null && roomID!=0){
   <div class="container overflow-auto shadow-sm p-3 mb-5 rounded" style="height:500px;width:90%;background-color:rgba(255,255,255,.1">
      @if(!userMessages.Any()){
         <p style="color:white;">No Messages.</p>
      }
      @foreach (var userMsg in userMessages){
         <div class="row mb-3 d-flex @((userMsg.UserName==LoggedInUser.UserName)?"justify-content-end":"")">
            <div class="card shadow @((userMsg.UserName==LoggedInUser.UserName)?"color-user":"color-other ml-5")" style="width:60%;padding:0;">
               <div class="card-header" style="display:flex;justify-content:space-between;flex-wrap:wrap;">
                  <span class="msgSpan">@((userMsg.UserName==LoggedInUser.UserName)?"You":userMsg.UserName)</span>
                  <span class="small msgSpan">@userMsg.DateSent.ToString("HH:mm | MMM dd")</span>
               </div>
               <ul class="list-group list-group-flush">
                  <li class="list-group-item">@userMsg.Message</li>
               </ul>
            </div>
         </div>
      }
   </div>
   }
   <div class="container chatboxInputContainer" >
      <!-- User Login -->
      @if(LoggedInUser is null){
         <div class="row">
            <ChatLogin setUser=@setUser />
            @if(LoggedInUser is not null){
               <span>@LoggedInUser.UserName @LoggedInUser.UserID</span>
            }
         </div>
      }
      <!-- User interface for entering a message and logout -->
      @if(LoggedInUser is not null && roomID!=0){
         <div class="row">
            <textarea @bind="messageInput" class="form-control" placeholder="Start Typing . . ."></textarea>
         </div>
         <div class="row">
            <div class=" userMessageButtonBox" style="margin:0 auto;">
               <button type="button" @onclick="SendToGroup" disabled="@(!isConnected)" class="btn btn-primary">
                  SEND
               </button>
               <button type="button" @onclick="LeaveChatRoom" disabled="@(!isConnected)" class="btn btn-primary">
                  Leave Room
               </button>
            </div>
         </div>
      }
   </div>
</div>
@code{
   private HubConnection _hubConnection;
   private List<UserMessage> userMessages = new List<UserMessage>(){};
   private string messageInput;   
   private User? LoggedInUser=null;
   private int roomID=0;
   private string selectedRoomID="";
   private bool chatRoomMade=!ChatLogs.IsEmpty();

   public bool isConnected=>_hubConnection.State==HubConnectionState.Connected;

   public void setUser(User? user){
      LoggedInUser=user;
      StateHasChanged();
   }

   protected override async  Task OnInitializedAsync()
   {
      _hubConnection=new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/chathub")).Build();
      
      _hubConnection.On( "UpdateChatRoomList",()=>{
         chatRoomMade=!ChatLogs.IsEmpty();
         StateHasChanged();
      });
      _hubConnection.On<string,string,int>("RecieveMessageToGroup",(user,message,chatID)=>{
         userMessages=ChatLogs.GetChatLog(chatID).GetChatLog;
         StateHasChanged();
      });
      _hubConnection.On<int>("UpdateListForClient",(chatID)=>{
         userMessages=ChatLogs.GetChatLog(chatID).GetChatLog;
         StateHasChanged();
      });
      await _hubConnection.StartAsync();
   }

   private async Task SendToGroup(){
      if(LoggedInUser is not null && !string.IsNullOrEmpty(messageInput)){
         await _hubConnection.SendAsync("SendMessageToGroup",LoggedInUser,messageInput,roomID);
         ChatLogs.GetChatLog(roomID).AddMessage(new UserMessage{
            UserName=LoggedInUser.UserName,
            Message=messageInput,
            CurrentUser=true,
            DateSent=DateTime.Now
         });
      }
      messageInput=string.Empty;
   }

   public async ValueTask DisposeAsync(){
      if(_hubConnection != null) await _hubConnection.DisposeAsync();
   }

   public async void JoinChatRoom(){
      roomID=int.Parse(selectedRoomID);
      await _hubConnection.SendAsync("AddToChat",roomID);
   }

   public async Task LeaveChatRoom(){
      await _hubConnection.SendAsync("RemoveFromChat",roomID);
      roomID=0;
      selectedRoomID="";
      StateHasChanged();
   }

   public async void MakeNewChatRoom(){
      roomID=ChatLogs.AddChatLog();
      await _hubConnection.SendAsync("AddToChat",roomID);
   }

   public async void Logout(){
      await _hubConnection.SendAsync("RemoveFromChat",roomID);
      roomID=0;
      selectedRoomID="";
      LoggedInUser=null;
      chatRoomMade=!ChatLogs.IsEmpty();
      userMessages = new List<UserMessage>(){};
      messageInput="";
      StateHasChanged();
   }

#line default
#line hidden
#nullable disable

}