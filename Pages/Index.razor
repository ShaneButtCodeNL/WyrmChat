@page "/"
@using Microsoft.AspNetCore.SignalR.Client;
@using WyrmChat.Models;
@inject NavigationManager NavigationManager;
@implements IAsyncDisposable;

<div class="container overflow-auto shadow-sm p-3 mb-5 bg-white rounded" style="height:500px;">
   @if(!userMessages.Any()){
      <p>No Messages.</p>
   }
   @foreach (var userMsg in userMessages){
      <div class="row mb-3 d-flex @(userMsg.CurrentUser?"justify-content-end":"")">
         <div class="card shadow @(userMsg.CurrentUser?"color-user":"color-other ml-5")" style="width:18rem;padding:0;">
            <div class="card-header">
               @(userMsg.CurrentUser?"You":userMsg.UserName)
            </div>
            <ul class="list-group list-group-flush">
               <li class="list-group-item">@userMsg.Message</li>
            </ul>
            <div class="card-footer">
               <span class="small">@userMsg.DateSent.ToString("HH:mm | MMM dd")</span>
            </div>
         </div>
      </div>
   }
</div>
<div class="container">
   <div class="row">
      <div class="col-3">
         <input type="text" @bind="userNameInput" class="form-control" readonly="@isUserReadOnly" placeholder="Name"/>
      </div>
      <div class="col-6">
         <textarea @bind="messageInput" class="form-control" placeholder="Start Typing . . ."></textarea>
      </div>
      <div class="col-3">
         <button type="button" @onclick="Send" disabled="@(!isConnected)" class="btn btn-primary">
            SEND
         </button>
      </div>
   </div>
</div>

@code{
   private HubConnection _hubConnection;
   private List<UserMessage> userMessages = new();
   private string userNameInput;
   private string messageInput;
   private bool isUserReadOnly=false;

   public bool isConnected=>_hubConnection.State==HubConnectionState.Connected;

   protected override async  Task OnInitializedAsync()
   {
      _hubConnection=new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/chathub")).Build();

      _hubConnection.On<string,string>("RecieveMessage",(user,message)=>{
         userMessages.Add(new UserMessage {
            UserName = user,
            Message = message,
            CurrentUser = user==userNameInput,
            DateSent = DateTime.Now
         });
         StateHasChanged();
      });
      await _hubConnection.StartAsync();
   }

   private async Task Send(){
      if(!string.IsNullOrEmpty(userNameInput) && !string.IsNullOrEmpty(messageInput)) await _hubConnection.SendAsync("SendMessage",userNameInput,messageInput);
      isUserReadOnly=true;
      messageInput=string.Empty;
   }

   public async ValueTask DisposeAsync(){
      if(_hubConnection != null) await _hubConnection.DisposeAsync();
   }

#line default
#line hidden
#nullable disable

}



